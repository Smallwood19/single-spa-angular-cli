{
  "version": 3,
  "file": "single-spa-angular-cli.js",
  "sources": [
    "ng://single-spa-angular-cli/out/single-spa.module.ts",
    "ng://single-spa-angular-cli/out/router/single-spa-router-link.directive.ts",
    "ng://single-spa-angular-cli/out/router/single-spa-router.service.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ElementRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SingleSpaRouterLinkDirective } from './router/single-spa-router-link.directive';\r\nimport { SingleSpaRouterService } from './router/single-spa-router.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    SingleSpaRouterLinkDirective\r\n  ],\r\n  exports: [\r\n    SingleSpaRouterLinkDirective\r\n  ],\r\n  providers: [\r\n    SingleSpaRouterService\r\n  ]\r\n})\r\nexport class SingleSpaModule { }\r\n",
    "import { Directive, HostListener, Input, OnChanges, SimpleChanges, HostBinding } from '@angular/core';\r\n\r\nimport { SingleSpaRouterService } from './single-spa-router.service';\r\n\r\n@Directive({\r\n  selector: '[singleSpaRouterLink]'\r\n})\r\nexport class SingleSpaRouterLinkDirective implements OnChanges {\r\n\r\n  @Input() public singleSpaRouterLink: string;\r\n  @HostBinding('href') private href: string;\r\n\r\n  constructor(\r\n    private singleSpaRouterService: SingleSpaRouterService\r\n  ) { }\r\n\r\n  @HostListener('click', ['$event']) onClick($event: Event) {\r\n    this.singleSpaRouterService.navigate(this.singleSpaRouterLink, $event);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.href = this.singleSpaRouterLink;\r\n  }\r\n\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\n\r\ndeclare const location: any;\r\ndeclare const history: any;\r\n\r\n@Injectable()\r\nexport class SingleSpaRouterService {\r\n\r\n  constructor() { }\r\n\r\n  navigate(path: string, event?: Event): void {\r\n    history.pushState(null, null, path);\r\n    if (event) {\r\n      event.stopPropagation();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n}\r\n"
  ],
  "names": [],
  "mappings": ";;;;;;;AEAA,AAMA,MAAA,sBAAA,CAAA;IAEE,WAAF,GAAA,GAAmB;;;;;;IAEjB,QAAQ,CAAC,IAAY,EAAE,KAAa,EAAtC;QACI,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACpC,IAAI,KAAK,EAAE;YACT,KAAK,CAAC,eAAe,EAAE,CAAC;YACxB,KAAK,CAAC,cAAc,EAAE,CAAC;SACxB;KACF;;;IAXH,EAAA,IAAA,EAAC,UAAU,EAAX;;;;;;;;;ADLA,AAOA,MAAA,4BAAA,CAAA;;;;IAKE,WAAF,CACY,sBADZ,EAAA;QACY,IAAZ,CAAA,sBAAkC,GAAtB,sBAAsB,CAAlC;KACO;;;;;IAE8B,OAAO,CAAC,MAAa,EAA1D;QACI,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;;;;;;IAGzE,WAAW,CAAC,OAAsB,EAApC;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC;KACtC;;;IAlBH,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;gBACT,QAAQ,EAAE,uBAAuB;aAClC,EAAD,EAAA;;;;IAJA,EAAA,IAAA,EAAS,sBAAsB,GAA/B;;;IAOA,qBAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,EAAA;IACA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAG,WAAW,EAAd,IAAA,EAAA,CAAe,MAAM,EAArB,EAAA,EAAA;IAMA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAG,YAAY,EAAf,IAAA,EAAA,CAAgB,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAnC,EAAA,EAAA;;;;;;;ADhBA,AAoBA,MAAA,eAAA,CAAA;;;IAdA,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;gBACR,OAAO,EAAE;oBACP,YAAY;iBACb;gBACD,YAAY,EAAE;oBACZ,4BAA4B;iBAC7B;gBACD,OAAO,EAAE;oBACP,4BAA4B;iBAC7B;gBACD,SAAS,EAAE;oBACT,sBAAsB;iBACvB;aACF,EAAD,EAAA;;;;;;;;;;;;;;;"
}
